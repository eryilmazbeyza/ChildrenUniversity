// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using coreData.Data;

namespace coreData.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DutyUnits", b =>
                {
                    b.Property<int>("DutyID")
                        .HasColumnType("int");

                    b.Property<int>("UnitsID")
                        .HasColumnType("int");

                    b.HasKey("DutyID", "UnitsID");

                    b.HasIndex("UnitsID");

                    b.ToTable("DutyUnits");
                });

            modelBuilder.Entity("coreModel.Duty", b =>
                {
                    b.Property<int>("DutyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DutyDefinition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DutyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DutyPoint")
                        .HasColumnType("int");

                    b.HasKey("DutyID");

                    b.ToTable("dutys");
                });

            modelBuilder.Entity("coreModel.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Bounty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateofStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("DutyID")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Shift")
                        .HasColumnType("bit");

                    b.Property<int>("TitleID")
                        .HasColumnType("int");

                    b.HasKey("EmployeeID");

                    b.HasIndex("DutyID");

                    b.HasIndex("TitleID");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("coreModel.Kids", b =>
                {
                    b.Property<int>("KidID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateofBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameSurname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KidID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("kids");
                });

            modelBuilder.Entity("coreModel.Project", b =>
                {
                    b.Property<int>("ProjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateofEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateofStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("DutyID")
                        .HasColumnType("int");

                    b.Property<string>("ProjectsName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectID");

                    b.HasIndex("DutyID");

                    b.ToTable("projects");
                });

            modelBuilder.Entity("coreModel.Title", b =>
                {
                    b.Property<int>("TitleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TitleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TitleID");

                    b.ToTable("titles");
                });

            modelBuilder.Entity("coreModel.Units", b =>
                {
                    b.Property<int>("UnitsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NumberofEmployee")
                        .HasColumnType("int");

                    b.Property<string>("UnitsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UnitsID");

                    b.ToTable("units");
                });

            modelBuilder.Entity("DutyUnits", b =>
                {
                    b.HasOne("coreModel.Duty", null)
                        .WithMany()
                        .HasForeignKey("DutyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("coreModel.Units", null)
                        .WithMany()
                        .HasForeignKey("UnitsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("coreModel.Employee", b =>
                {
                    b.HasOne("coreModel.Duty", "Duty")
                        .WithMany()
                        .HasForeignKey("DutyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("coreModel.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Duty");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("coreModel.Kids", b =>
                {
                    b.HasOne("coreModel.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("coreModel.Project", b =>
                {
                    b.HasOne("coreModel.Duty", "Duty")
                        .WithMany()
                        .HasForeignKey("DutyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Duty");
                });
#pragma warning restore 612, 618
        }
    }
}
